- name: allowed-queries
  definition:
    queries:
    - name: QueryUsersInGroup
      query: |-
        query QueryUsersInGroup($groupId: uuid!) {
          users {
              name,
              profile_picture,
              id
          }
        }
    - name: query
      query: |-
        query {
          users {
            name
          }
        }
    - name: query_roles_in_thread
      query: 'query QueryRolesInThread($threadId: uuid!) {  role_to_threads(where:
        {thread_id: {    _eq: $threadId  }}) {    role {      name,      id    },   }}'
    - name: add_role_to_thread
      query: 'mutation AddRoleToThread($threadId: uuid!, $roleId: uuid!) {  insert_role_to_threads_one(object:
        {    role_id: $roleId,    thread_id: $threadId  }) {    id  }}'
    - name: query_verify_self_in_thread
      query: 'query QueryVerifySelfInThread($userId: uuid!, $groupId: uuid!, $threadId:
        uuid!) {  threads_aggregate(where: {  _and: {      group_id: {        _eq:
        $groupId      },      users: {        _and: {          user_id: {          _eq:
        $userId          },          thread_id: {          _eq: $threadId          }        }      },    }  })
        {    aggregate {      count    }  }}'
    - name: insert_image
      query: 'mutation GetSignedInsertImageLink($sourceId: uuid!, $uploadType: UploadType!)
        {  insert_image(imageData: {      sourceId: $sourceId,      uploadType: $uploadType  })
        {    uploadUrl,    imageName  }}'
    - name: get_image_download_url
      query: 'mutation GetImageDownloadUrl(  $sourceId: uuid!,  $uploadType: UploadType!,)
        {  get_signed_download_link(sourceId: $sourceId, uploadType: $uploadType)
        {    downloadUrl  }}'
    - name: query_users_in_dm
      query: 'query QueryUsersInDm($dmId: uuid!) {  user_to_dm(where: {    dm_id:
        {      _eq: $dmId    }  }) {    user {      name,      id    }  }}'
    - name: query_view_only_threads
      query: 'query QueryViewOnlyThreads($groupId: uuid!, $userId: uuid!) {  threads(where:
        {  _and: {      group_id: {        _eq: $groupId      },      _not: {      users:
        {        user_id: {          _eq: $userId        }      }       }    }  })
        {    name,     id  }}'
    - name: update_self_name
      query: 'mutation UpdateSelfName($id: uuid!, $name: String!) {  update_users_by_pk(    pk_columns:
        { id: $id }  _set: { name: $name }  ) {    name  }}'
    - name: add_roles_to_thread
      query: 'mutation AddRolesToThreads($roles: [role_to_threads_insert_input!]!)
        {  insert_role_to_threads(objects: $roles) {    affected_rows  }}'
    - name: add_thread_to_group
      query: 'mutation AddThreadToGroup($groupId: uuid!, $threadName: String!) {  insert_threads_one(object:
        {    name: $threadName,    group_id: $groupId  }) {    id,    name  }}'
    - name: remove_role_from_group
      query: 'mutation RemoveRoleFromGroup($roleId: uuid!) {  delete_roles(where:
        {    id: {      _eq: $roleId    }  }) {    affected_rows  }}'
    - name: query_self_group_preview
      query: 'query QuerySelfGroupsPreview($self_id: uuid!) {  user_to_group(where:
        {    user_id: {    _eq: $self_id    }  }) {   group {        id,        name      },    owner    }}'
    - name: query_users_in_thread
      query: 'query QueryUsersInThread($threadId: uuid!) {  user_to_thread(where:
        {    thread_id: {      _eq: $threadId    }  }) {    user {      name,      id    }  }}'
    - name: query_roles_in_group
      query: 'query QueryRolesInGroup($groupId: uuid!) {  roles(where: {    group_id:
        {      _eq: $groupId    }  }) {    name,    id  }}'
    - name: insert_message
      query: 'mutation InsertMessage(  $message: String!,   $sourceId: uuid!,   $messageId:
        uuid!,$messageType: message_types_enum!) {  insert_messages(objects: {    body:
        $message,    source_id: $sourceId,    id: $messageId,    message_type: $messageType  })
        {    returning {      created_at    }  }}'
    - name: manage_device_token
      query: 'mutation ManageDeviceToken(  $deviceToken: String!,   $handle: DeviceTokenHandleType!)
        {  handle_device_token(    deviceToken: $deviceToken,     handle: $handle  )
        {    success  }}'
    - name: query_self_threads_in_group
      query: 'query QuerySelfThreadsInGroup($userId: uuid!, $groupId: uuid!) {  threads(where:
        {  _and: {      group_id: {        _eq: $groupId      },      users: {        user_id:
        {          _eq: $userId        }      }    }  }) {    name,    id  }}'
    - name: query_self_groups
      query: 'fragment group_base_fields on groups {    name,    id}query QuerySelfGroups($selfId:
        uuid!) {  admin_clubs: user_to_group(    where: {      owner: {      _eq:true      },      user_id:
        {        _eq: $selfId      }    }  ) {    group {      ...group_base_fields,    }  },    member_clubs:
        user_to_group(    where: {      owner: {      _eq:false      },      user_id:
        {        _eq: $selfId      }    }  ) {    group {      ...group_base_fields    }  },  dms(    where:
        {      user_to_dms: {        user_id: {          _eq: $selfId        }      }    }  )
        {    id,    name,    user_to_dms {      user {        id,        name      }    }  }}'
    - name: get_image_upload_url
      query: 'mutation GetImageUploadUrl(  $fileSize: Int!,  $sourceId: uuid!,  $uploadType:
        UploadType!,  $contentType: String!) {  insert_image(    fileSize: $fileSize,    sourceId:
        $sourceId,    uploadType: $uploadType,    contentType: $contentType  ) {    uploadUrl,    imageName  }}'
    - name: query_messages_in_chat
      query: 'query QueryMessagesInChat(  $threadId: uuid!,  $before: timestamptz!)
        {  messages(    limit: 20,    order_by: {      created_at: desc    },    where:
        {      source_id: {        _eq: $threadId,      },      created_at: {        _lte:
        $before      }    }  ) {   created_at,    body,    user {      name,      id    },  message_reactions
        {      reaction_type,      id,      user {        id,        name      }    },    message_type,    updated_at,    id  }}'
    - name: add_roles_to_users
      query: 'mutation AddRolesToUsers($roles: [user_to_role_insert_input!]!) {  insert_user_to_role(objects:
        $roles) {    affected_rows  }}'
    - name: add_role_to_group
      query: 'mutation AddRoleToGroup($roleName: String!, $groupId: uuid!) {  insert_roles_one(object:
        {    name: $roleName,    group_id: $groupId,    join_token: {      data: {}    }  })
        {    id,    name,    join_token {token    }  }}'
    - name: get_new_reactions
      query: 'subscription GetNewReactions(  $sourceId: uuid!,) {  message_reactions(limit:
        5, order_by: {    updated_at: desc  },    where: {     message: {      source_id:
        {        _eq: $sourceId      }     }    }) {    created_at,    user {      id,      name    },    reaction_type,    deleted,    message
        {      id    },    id  }}'
    - name: query_roles_in_group_with_join_code
      query: 'query QueryRolesInGroupWithJoinCode($groupId: uuid!) {  roles(where:
        {    group_id: {      _eq: $groupId    }  }) {    name,    id,    join_token
        {      token    }  }}'
    - name: upsert_reaction
      query: 'mutation UpsertReaction(  $deleted: Boolean!,   $messageId: uuid!,   $reaction:
        message_reaction_types_enum!) {  insert_message_reactions_one(object: {    deleted:
        $deleted,    message_id: $messageId,    reaction_type: $reaction,  },  on_conflict:
        {    constraint: message_reactions_pkey,    update_columns: [deleted]  }  )
        {    id,    deleted  }}'
    - name: query_all_roles_relative_to_thread
      query: 'query QueryAllRolesRelativeToThread($threadId: uuid!, $groupId: uuid!)
        {  roles(where: {    group_id: {      _eq: $groupId    }  }) {    name,    role_to_threads(where:
        {      thread_id: {        _eq: $threadId      }    }) {      role_id    },    name,    id  }}'
    - name: refresh
      query: 'mutation Refresh($refreshToken: String!, $userId: uuid!) {  refresh_access_token(refreshToken:
        $refreshToken, userId:$userId) {    accessToken  }}'
    - name: query_users_in_group
      query: 'query QueryUsersInGroup($groupId: uuid!) {  user_to_group(where: {    group_id:
        {      _eq: $groupId    }  }) {    user {      name,      id,      user_to_roles(where:
        {        role: {          group_id: {            _eq: $groupId}        }      })
        {        role {          name,          id        }      }    }  }}'
    - name: remove_role_from_thread
      query: 'mutation RemoveRoleFromThread($roleId:uuid!, $threadId: uuid!) {  delete_role_to_threads(where:
        {    role_id: {      _eq: $roleId    },    thread_id: {      _eq: $threadId    }  })
        {    affected_rows  }}'
    - name: join_roles_with_join_codes
      query: 'mutation JoinRolesWithJoinCodes($join_codes: [String]!) {  join_role_with_join_codes(join_codes:
        $join_codes) {    joined  }}  '
    - name: authenticate
      query: 'mutation Authenticate($identity_provider: IdentityProvider!, $id_token:
        String!) {  authenticate(identityProvider: $identity_provider, idToken: $id_token)
        {    accessToken,    refreshToken,    id,    name  }}'
    - name: get_new_messages
      query: 'subscription GetNewMessages(  $sourceId: uuid!,) {  messages(    order_by:
        {      created_at: desc    },    where: {      source_id: {        _eq: $sourceId,      },    },    limit:
        10  ) {   created_at,    body,    id,    user {      name,      id    },    message_reactions
        {      reaction_type,      id,      user {        id,        name      }    },    message_type,    updated_at  }}'
    - name: remove_role_from_user
      query: 'mutation RemoveRoleFromUser($userId: uuid!, $roleId: uuid!) {  delete_user_to_role(where:
        {      _and: [        {          user_id: {            _eq: $userId          },          role_id:
        {            _eq: $roleId          }        }      ]  }) {    affected_rows  }}'
    - name: remove_self_from_group
      query: 'mutation RemoveSelfFromGroup($groupId: uuid!, $userId: uuid!) {  delete_user_to_role(where:
        {    _and: {      user_id:{        _eq: $userId      },      role: {        group_id:
        {          _eq: $groupId        }      }    }  }) {    affected_rows  }}'
    - name: get_or_create_dm
      query: 'mutation GetOrCreateDm($withUserId: uuid!) {  get_or_create_dm(with_user_id:
        $withUserId) {    name,    id  }}'
