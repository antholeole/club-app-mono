schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

type AccessToken {
  accessToken: String!
}

type AuthenticationResponse {
  accessToken: String!
  email: String
  id: uuid!
  name: String!
  refreshToken: String!
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "group_join_tokens"
"""
type group_join_tokens {
  """An object relationship"""
  group: groups!
  group_id: uuid!
  id: uuid!
  join_token: String
}

"""
aggregated selection of "group_join_tokens"
"""
type group_join_tokens_aggregate {
  aggregate: group_join_tokens_aggregate_fields
  nodes: [group_join_tokens!]!
}

"""
aggregate fields of "group_join_tokens"
"""
type group_join_tokens_aggregate_fields {
  count(columns: [group_join_tokens_select_column!], distinct: Boolean): Int!
  max: group_join_tokens_max_fields
  min: group_join_tokens_min_fields
}

"""
order by aggregate values of table "group_join_tokens"
"""
input group_join_tokens_aggregate_order_by {
  count: order_by
  max: group_join_tokens_max_order_by
  min: group_join_tokens_min_order_by
}

"""
input type for inserting array relation for remote table "group_join_tokens"
"""
input group_join_tokens_arr_rel_insert_input {
  data: [group_join_tokens_insert_input!]!

  """on conflict condition"""
  on_conflict: group_join_tokens_on_conflict
}

"""
Boolean expression to filter rows from the table "group_join_tokens". All fields are combined with a logical 'AND'.
"""
input group_join_tokens_bool_exp {
  _and: [group_join_tokens_bool_exp!]
  _not: group_join_tokens_bool_exp
  _or: [group_join_tokens_bool_exp!]
  group: groups_bool_exp
  group_id: uuid_comparison_exp
  id: uuid_comparison_exp
  join_token: String_comparison_exp
}

"""
unique or primary key constraints on table "group_join_tokens"
"""
enum group_join_tokens_constraint {
  """unique or primary key constraint"""
  group_join_tokens_group_id_key

  """unique or primary key constraint"""
  group_join_tokens_pkey
}

"""
input type for inserting data into table "group_join_tokens"
"""
input group_join_tokens_insert_input {
  group: groups_obj_rel_insert_input
  group_id: uuid
  id: uuid
  join_token: String
}

"""aggregate max on columns"""
type group_join_tokens_max_fields {
  group_id: uuid
  id: uuid
  join_token: String
}

"""
order by max() on columns of table "group_join_tokens"
"""
input group_join_tokens_max_order_by {
  group_id: order_by
  id: order_by
  join_token: order_by
}

"""aggregate min on columns"""
type group_join_tokens_min_fields {
  group_id: uuid
  id: uuid
  join_token: String
}

"""
order by min() on columns of table "group_join_tokens"
"""
input group_join_tokens_min_order_by {
  group_id: order_by
  id: order_by
  join_token: order_by
}

"""
response of any mutation on the table "group_join_tokens"
"""
type group_join_tokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [group_join_tokens!]!
}

"""
on conflict condition type for table "group_join_tokens"
"""
input group_join_tokens_on_conflict {
  constraint: group_join_tokens_constraint!
  update_columns: [group_join_tokens_update_column!]! = []
  where: group_join_tokens_bool_exp
}

"""Ordering options when selecting data from "group_join_tokens"."""
input group_join_tokens_order_by {
  group: groups_order_by
  group_id: order_by
  id: order_by
  join_token: order_by
}

"""primary key columns input for table: group_join_tokens"""
input group_join_tokens_pk_columns_input {
  id: uuid!
}

"""
select columns of table "group_join_tokens"
"""
enum group_join_tokens_select_column {
  """column name"""
  group_id

  """column name"""
  id

  """column name"""
  join_token
}

"""
input type for updating data in table "group_join_tokens"
"""
input group_join_tokens_set_input {
  group_id: uuid
  id: uuid
  join_token: String
}

"""
update columns of table "group_join_tokens"
"""
enum group_join_tokens_update_column {
  """column name"""
  group_id

  """column name"""
  id

  """column name"""
  join_token
}

"""
columns and relationships of "groups"
"""
type groups {
  """An array relationship"""
  group_join_tokens(
    """distinct select on columns"""
    distinct_on: [group_join_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_join_tokens_order_by!]

    """filter the rows returned"""
    where: group_join_tokens_bool_exp
  ): [group_join_tokens!]!

  """An aggregate relationship"""
  group_join_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [group_join_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_join_tokens_order_by!]

    """filter the rows returned"""
    where: group_join_tokens_bool_exp
  ): group_join_tokens_aggregate!
  group_name: String!

  """An array relationship"""
  group_threads(
    """distinct select on columns"""
    distinct_on: [threads_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [threads_order_by!]

    """filter the rows returned"""
    where: threads_bool_exp
  ): [threads!]!

  """An aggregate relationship"""
  group_threads_aggregate(
    """distinct select on columns"""
    distinct_on: [threads_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [threads_order_by!]

    """filter the rows returned"""
    where: threads_bool_exp
  ): threads_aggregate!
  id: uuid!

  """An array relationship"""
  user_to_groups(
    """distinct select on columns"""
    distinct_on: [user_to_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_group_order_by!]

    """filter the rows returned"""
    where: user_to_group_bool_exp
  ): [user_to_group!]!

  """An aggregate relationship"""
  user_to_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [user_to_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_group_order_by!]

    """filter the rows returned"""
    where: user_to_group_bool_exp
  ): user_to_group_aggregate!
}

"""
aggregated selection of "groups"
"""
type groups_aggregate {
  aggregate: groups_aggregate_fields
  nodes: [groups!]!
}

"""
aggregate fields of "groups"
"""
type groups_aggregate_fields {
  count(columns: [groups_select_column!], distinct: Boolean): Int!
  max: groups_max_fields
  min: groups_min_fields
}

"""
Boolean expression to filter rows from the table "groups". All fields are combined with a logical 'AND'.
"""
input groups_bool_exp {
  _and: [groups_bool_exp!]
  _not: groups_bool_exp
  _or: [groups_bool_exp!]
  group_join_tokens: group_join_tokens_bool_exp
  group_name: String_comparison_exp
  group_threads: threads_bool_exp
  id: uuid_comparison_exp
  user_to_groups: user_to_group_bool_exp
}

"""
unique or primary key constraints on table "groups"
"""
enum groups_constraint {
  """unique or primary key constraint"""
  groups_pkey
}

"""
input type for inserting data into table "groups"
"""
input groups_insert_input {
  group_join_tokens: group_join_tokens_arr_rel_insert_input
  group_name: String
  group_threads: threads_arr_rel_insert_input
  id: uuid
  user_to_groups: user_to_group_arr_rel_insert_input
}

"""aggregate max on columns"""
type groups_max_fields {
  group_name: String
  id: uuid
}

"""aggregate min on columns"""
type groups_min_fields {
  group_name: String
  id: uuid
}

"""
response of any mutation on the table "groups"
"""
type groups_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [groups!]!
}

"""
input type for inserting object relation for remote table "groups"
"""
input groups_obj_rel_insert_input {
  data: groups_insert_input!

  """on conflict condition"""
  on_conflict: groups_on_conflict
}

"""
on conflict condition type for table "groups"
"""
input groups_on_conflict {
  constraint: groups_constraint!
  update_columns: [groups_update_column!]! = []
  where: groups_bool_exp
}

"""Ordering options when selecting data from "groups"."""
input groups_order_by {
  group_join_tokens_aggregate: group_join_tokens_aggregate_order_by
  group_name: order_by
  group_threads_aggregate: threads_aggregate_order_by
  id: order_by
  user_to_groups_aggregate: user_to_group_aggregate_order_by
}

"""primary key columns input for table: groups"""
input groups_pk_columns_input {
  id: uuid!
}

"""
select columns of table "groups"
"""
enum groups_select_column {
  """column name"""
  group_name

  """column name"""
  id
}

"""
input type for updating data in table "groups"
"""
input groups_set_input {
  group_name: String
  id: uuid
}

"""
update columns of table "groups"
"""
enum groups_update_column {
  """column name"""
  group_name

  """column name"""
  id
}

enum IdentityProvider {
  Debug
  Google
}

"""
columns and relationships of "message_reaction_types"
"""
type message_reaction_types {
  description: String
  reaction_type: String!
}

"""
aggregated selection of "message_reaction_types"
"""
type message_reaction_types_aggregate {
  aggregate: message_reaction_types_aggregate_fields
  nodes: [message_reaction_types!]!
}

"""
aggregate fields of "message_reaction_types"
"""
type message_reaction_types_aggregate_fields {
  count(columns: [message_reaction_types_select_column!], distinct: Boolean): Int!
  max: message_reaction_types_max_fields
  min: message_reaction_types_min_fields
}

"""
Boolean expression to filter rows from the table "message_reaction_types". All fields are combined with a logical 'AND'.
"""
input message_reaction_types_bool_exp {
  _and: [message_reaction_types_bool_exp!]
  _not: message_reaction_types_bool_exp
  _or: [message_reaction_types_bool_exp!]
  description: String_comparison_exp
  reaction_type: String_comparison_exp
}

"""
unique or primary key constraints on table "message_reaction_types"
"""
enum message_reaction_types_constraint {
  """unique or primary key constraint"""
  message_reaction_types_pkey
}

enum message_reaction_types_enum {
  """😡"""
  ANGRY

  """😭"""
  CRY

  """😂"""
  LAUGH

  """❤️"""
  LIKE

  """😮"""
  WOW
}

"""
Boolean expression to compare columns of type "message_reaction_types_enum". All fields are combined with logical 'AND'.
"""
input message_reaction_types_enum_comparison_exp {
  _eq: message_reaction_types_enum
  _in: [message_reaction_types_enum!]
  _is_null: Boolean
  _neq: message_reaction_types_enum
  _nin: [message_reaction_types_enum!]
}

"""
input type for inserting data into table "message_reaction_types"
"""
input message_reaction_types_insert_input {
  description: String
  reaction_type: String
}

"""aggregate max on columns"""
type message_reaction_types_max_fields {
  description: String
  reaction_type: String
}

"""aggregate min on columns"""
type message_reaction_types_min_fields {
  description: String
  reaction_type: String
}

"""
response of any mutation on the table "message_reaction_types"
"""
type message_reaction_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [message_reaction_types!]!
}

"""
input type for inserting object relation for remote table "message_reaction_types"
"""
input message_reaction_types_obj_rel_insert_input {
  data: message_reaction_types_insert_input!

  """on conflict condition"""
  on_conflict: message_reaction_types_on_conflict
}

"""
on conflict condition type for table "message_reaction_types"
"""
input message_reaction_types_on_conflict {
  constraint: message_reaction_types_constraint!
  update_columns: [message_reaction_types_update_column!]! = []
  where: message_reaction_types_bool_exp
}

"""Ordering options when selecting data from "message_reaction_types"."""
input message_reaction_types_order_by {
  description: order_by
  reaction_type: order_by
}

"""primary key columns input for table: message_reaction_types"""
input message_reaction_types_pk_columns_input {
  reaction_type: String!
}

"""
select columns of table "message_reaction_types"
"""
enum message_reaction_types_select_column {
  """column name"""
  description

  """column name"""
  reaction_type
}

"""
input type for updating data in table "message_reaction_types"
"""
input message_reaction_types_set_input {
  description: String
  reaction_type: String
}

"""
update columns of table "message_reaction_types"
"""
enum message_reaction_types_update_column {
  """column name"""
  description

  """column name"""
  reaction_type
}

"""
'id' is just for identification purposes; reaction_type, user_id, and message_id all serve as a PK combined.


columns and relationships of "message_reactions"

"""
type message_reactions {
  id: uuid!

  """An object relationship"""
  message: messages!
  message_id: uuid!

  """An object relationship"""
  message_reaction_type: message_reaction_types!
  reaction_type: message_reaction_types_enum!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "message_reactions"
"""
type message_reactions_aggregate {
  aggregate: message_reactions_aggregate_fields
  nodes: [message_reactions!]!
}

"""
aggregate fields of "message_reactions"
"""
type message_reactions_aggregate_fields {
  count(columns: [message_reactions_select_column!], distinct: Boolean): Int!
  max: message_reactions_max_fields
  min: message_reactions_min_fields
}

"""
order by aggregate values of table "message_reactions"
"""
input message_reactions_aggregate_order_by {
  count: order_by
  max: message_reactions_max_order_by
  min: message_reactions_min_order_by
}

"""
input type for inserting array relation for remote table "message_reactions"
"""
input message_reactions_arr_rel_insert_input {
  data: [message_reactions_insert_input!]!

  """on conflict condition"""
  on_conflict: message_reactions_on_conflict
}

"""
Boolean expression to filter rows from the table "message_reactions". All fields are combined with a logical 'AND'.
"""
input message_reactions_bool_exp {
  _and: [message_reactions_bool_exp!]
  _not: message_reactions_bool_exp
  _or: [message_reactions_bool_exp!]
  id: uuid_comparison_exp
  message: messages_bool_exp
  message_id: uuid_comparison_exp
  message_reaction_type: message_reaction_types_bool_exp
  reaction_type: message_reaction_types_enum_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "message_reactions"
"""
enum message_reactions_constraint {
  """unique or primary key constraint"""
  message_reactions_pkey
}

"""
input type for inserting data into table "message_reactions"
"""
input message_reactions_insert_input {
  id: uuid
  message: messages_obj_rel_insert_input
  message_id: uuid
  message_reaction_type: message_reaction_types_obj_rel_insert_input
  reaction_type: message_reaction_types_enum
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type message_reactions_max_fields {
  id: uuid
  message_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "message_reactions"
"""
input message_reactions_max_order_by {
  id: order_by
  message_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type message_reactions_min_fields {
  id: uuid
  message_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "message_reactions"
"""
input message_reactions_min_order_by {
  id: order_by
  message_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "message_reactions"
"""
type message_reactions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [message_reactions!]!
}

"""
on conflict condition type for table "message_reactions"
"""
input message_reactions_on_conflict {
  constraint: message_reactions_constraint!
  update_columns: [message_reactions_update_column!]! = []
  where: message_reactions_bool_exp
}

"""Ordering options when selecting data from "message_reactions"."""
input message_reactions_order_by {
  id: order_by
  message: messages_order_by
  message_id: order_by
  message_reaction_type: message_reaction_types_order_by
  reaction_type: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: message_reactions"""
input message_reactions_pk_columns_input {
  message_id: uuid!
  reaction_type: message_reaction_types_enum!
  user_id: uuid!
}

"""
select columns of table "message_reactions"
"""
enum message_reactions_select_column {
  """column name"""
  id

  """column name"""
  message_id

  """column name"""
  reaction_type

  """column name"""
  user_id
}

"""
input type for updating data in table "message_reactions"
"""
input message_reactions_set_input {
  id: uuid
  message_id: uuid
  reaction_type: message_reaction_types_enum
  user_id: uuid
}

"""
update columns of table "message_reactions"
"""
enum message_reactions_update_column {
  """column name"""
  id

  """column name"""
  message_id

  """column name"""
  reaction_type

  """column name"""
  user_id
}

"""
columns and relationships of "messages"
"""
type messages {
  created_at: timestamptz!
  deleted: Boolean!

  """An object relationship"""
  group_thread: threads!
  id: uuid!
  is_image: Boolean!
  message: String!

  """An array relationship"""
  message_reactions(
    """distinct select on columns"""
    distinct_on: [message_reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reactions_order_by!]

    """filter the rows returned"""
    where: message_reactions_bool_exp
  ): [message_reactions!]!

  """An aggregate relationship"""
  message_reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [message_reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reactions_order_by!]

    """filter the rows returned"""
    where: message_reactions_bool_exp
  ): message_reactions_aggregate!
  thread_id: uuid!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_sent: uuid!
}

"""
aggregated selection of "messages"
"""
type messages_aggregate {
  aggregate: messages_aggregate_fields
  nodes: [messages!]!
}

"""
aggregate fields of "messages"
"""
type messages_aggregate_fields {
  count(columns: [messages_select_column!], distinct: Boolean): Int!
  max: messages_max_fields
  min: messages_min_fields
}

"""
order by aggregate values of table "messages"
"""
input messages_aggregate_order_by {
  count: order_by
  max: messages_max_order_by
  min: messages_min_order_by
}

"""
input type for inserting array relation for remote table "messages"
"""
input messages_arr_rel_insert_input {
  data: [messages_insert_input!]!

  """on conflict condition"""
  on_conflict: messages_on_conflict
}

"""
Boolean expression to filter rows from the table "messages". All fields are combined with a logical 'AND'.
"""
input messages_bool_exp {
  _and: [messages_bool_exp!]
  _not: messages_bool_exp
  _or: [messages_bool_exp!]
  created_at: timestamptz_comparison_exp
  deleted: Boolean_comparison_exp
  group_thread: threads_bool_exp
  id: uuid_comparison_exp
  is_image: Boolean_comparison_exp
  message: String_comparison_exp
  message_reactions: message_reactions_bool_exp
  thread_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_sent: uuid_comparison_exp
}

"""
unique or primary key constraints on table "messages"
"""
enum messages_constraint {
  """unique or primary key constraint"""
  messages_pkey
}

"""
input type for inserting data into table "messages"
"""
input messages_insert_input {
  created_at: timestamptz
  deleted: Boolean
  group_thread: threads_obj_rel_insert_input
  id: uuid
  is_image: Boolean
  message: String
  message_reactions: message_reactions_arr_rel_insert_input
  thread_id: uuid
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_sent: uuid
}

"""aggregate max on columns"""
type messages_max_fields {
  created_at: timestamptz
  id: uuid
  message: String
  thread_id: uuid
  updated_at: timestamptz
  user_sent: uuid
}

"""
order by max() on columns of table "messages"
"""
input messages_max_order_by {
  created_at: order_by
  id: order_by
  message: order_by
  thread_id: order_by
  updated_at: order_by
  user_sent: order_by
}

"""aggregate min on columns"""
type messages_min_fields {
  created_at: timestamptz
  id: uuid
  message: String
  thread_id: uuid
  updated_at: timestamptz
  user_sent: uuid
}

"""
order by min() on columns of table "messages"
"""
input messages_min_order_by {
  created_at: order_by
  id: order_by
  message: order_by
  thread_id: order_by
  updated_at: order_by
  user_sent: order_by
}

"""
response of any mutation on the table "messages"
"""
type messages_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [messages!]!
}

"""
input type for inserting object relation for remote table "messages"
"""
input messages_obj_rel_insert_input {
  data: messages_insert_input!

  """on conflict condition"""
  on_conflict: messages_on_conflict
}

"""
on conflict condition type for table "messages"
"""
input messages_on_conflict {
  constraint: messages_constraint!
  update_columns: [messages_update_column!]! = []
  where: messages_bool_exp
}

"""Ordering options when selecting data from "messages"."""
input messages_order_by {
  created_at: order_by
  deleted: order_by
  group_thread: threads_order_by
  id: order_by
  is_image: order_by
  message: order_by
  message_reactions_aggregate: message_reactions_aggregate_order_by
  thread_id: order_by
  updated_at: order_by
  user: users_order_by
  user_sent: order_by
}

"""primary key columns input for table: messages"""
input messages_pk_columns_input {
  id: uuid!
}

"""
select columns of table "messages"
"""
enum messages_select_column {
  """column name"""
  created_at

  """column name"""
  deleted

  """column name"""
  id

  """column name"""
  is_image

  """column name"""
  message

  """column name"""
  thread_id

  """column name"""
  updated_at

  """column name"""
  user_sent
}

"""
input type for updating data in table "messages"
"""
input messages_set_input {
  created_at: timestamptz
  deleted: Boolean
  id: uuid
  is_image: Boolean
  message: String
  thread_id: uuid
  updated_at: timestamptz
  user_sent: uuid
}

"""
update columns of table "messages"
"""
enum messages_update_column {
  """column name"""
  created_at

  """column name"""
  deleted

  """column name"""
  id

  """column name"""
  is_image

  """column name"""
  message

  """column name"""
  thread_id

  """column name"""
  updated_at

  """column name"""
  user_sent
}

"""mutation root"""
type mutation_root {
  authenticate(idToken: String!, identityProvider: IdentityProvider!): AuthenticationResponse

  """
  delete data from the table: "group_join_tokens"
  """
  delete_group_join_tokens(
    """filter the rows which have to be deleted"""
    where: group_join_tokens_bool_exp!
  ): group_join_tokens_mutation_response

  """
  delete single row from the table: "group_join_tokens"
  """
  delete_group_join_tokens_by_pk(id: uuid!): group_join_tokens

  """
  delete data from the table: "groups"
  """
  delete_groups(
    """filter the rows which have to be deleted"""
    where: groups_bool_exp!
  ): groups_mutation_response

  """
  delete single row from the table: "groups"
  """
  delete_groups_by_pk(id: uuid!): groups

  """
  delete data from the table: "message_reaction_types"
  """
  delete_message_reaction_types(
    """filter the rows which have to be deleted"""
    where: message_reaction_types_bool_exp!
  ): message_reaction_types_mutation_response

  """
  delete single row from the table: "message_reaction_types"
  """
  delete_message_reaction_types_by_pk(reaction_type: String!): message_reaction_types

  """
  delete data from the table: "message_reactions"
  """
  delete_message_reactions(
    """filter the rows which have to be deleted"""
    where: message_reactions_bool_exp!
  ): message_reactions_mutation_response

  """
  delete single row from the table: "message_reactions"
  """
  delete_message_reactions_by_pk(message_id: uuid!, reaction_type: message_reaction_types_enum!, user_id: uuid!): message_reactions

  """
  delete data from the table: "messages"
  """
  delete_messages(
    """filter the rows which have to be deleted"""
    where: messages_bool_exp!
  ): messages_mutation_response

  """
  delete single row from the table: "messages"
  """
  delete_messages_by_pk(id: uuid!): messages

  """
  delete data from the table: "single_dms"
  """
  delete_single_dms(
    """filter the rows which have to be deleted"""
    where: single_dms_bool_exp!
  ): single_dms_mutation_response

  """
  delete data from the table: "threads"
  """
  delete_threads(
    """filter the rows which have to be deleted"""
    where: threads_bool_exp!
  ): threads_mutation_response

  """
  delete single row from the table: "threads"
  """
  delete_threads_by_pk(id: uuid!): threads

  """
  delete data from the table: "user_to_group"
  """
  delete_user_to_group(
    """filter the rows which have to be deleted"""
    where: user_to_group_bool_exp!
  ): user_to_group_mutation_response

  """
  delete single row from the table: "user_to_group"
  """
  delete_user_to_group_by_pk(id: uuid!): user_to_group

  """
  delete data from the table: "user_to_thread"
  """
  delete_user_to_thread(
    """filter the rows which have to be deleted"""
    where: user_to_thread_bool_exp!
  ): user_to_thread_mutation_response

  """
  delete single row from the table: "user_to_thread"
  """
  delete_user_to_thread_by_pk(id: uuid!): user_to_thread

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: uuid!): users
  get_or_create_dm(with_user_id: uuid!): ThreadResponse

  """
  insert data into the table: "group_join_tokens"
  """
  insert_group_join_tokens(
    """the rows to be inserted"""
    objects: [group_join_tokens_insert_input!]!

    """on conflict condition"""
    on_conflict: group_join_tokens_on_conflict
  ): group_join_tokens_mutation_response

  """
  insert a single row into the table: "group_join_tokens"
  """
  insert_group_join_tokens_one(
    """the row to be inserted"""
    object: group_join_tokens_insert_input!

    """on conflict condition"""
    on_conflict: group_join_tokens_on_conflict
  ): group_join_tokens

  """
  insert data into the table: "groups"
  """
  insert_groups(
    """the rows to be inserted"""
    objects: [groups_insert_input!]!

    """on conflict condition"""
    on_conflict: groups_on_conflict
  ): groups_mutation_response

  """
  insert a single row into the table: "groups"
  """
  insert_groups_one(
    """the row to be inserted"""
    object: groups_insert_input!

    """on conflict condition"""
    on_conflict: groups_on_conflict
  ): groups

  """
  insert data into the table: "message_reaction_types"
  """
  insert_message_reaction_types(
    """the rows to be inserted"""
    objects: [message_reaction_types_insert_input!]!

    """on conflict condition"""
    on_conflict: message_reaction_types_on_conflict
  ): message_reaction_types_mutation_response

  """
  insert a single row into the table: "message_reaction_types"
  """
  insert_message_reaction_types_one(
    """the row to be inserted"""
    object: message_reaction_types_insert_input!

    """on conflict condition"""
    on_conflict: message_reaction_types_on_conflict
  ): message_reaction_types

  """
  insert data into the table: "message_reactions"
  """
  insert_message_reactions(
    """the rows to be inserted"""
    objects: [message_reactions_insert_input!]!

    """on conflict condition"""
    on_conflict: message_reactions_on_conflict
  ): message_reactions_mutation_response

  """
  insert a single row into the table: "message_reactions"
  """
  insert_message_reactions_one(
    """the row to be inserted"""
    object: message_reactions_insert_input!

    """on conflict condition"""
    on_conflict: message_reactions_on_conflict
  ): message_reactions

  """
  insert data into the table: "messages"
  """
  insert_messages(
    """the rows to be inserted"""
    objects: [messages_insert_input!]!

    """on conflict condition"""
    on_conflict: messages_on_conflict
  ): messages_mutation_response

  """
  insert a single row into the table: "messages"
  """
  insert_messages_one(
    """the row to be inserted"""
    object: messages_insert_input!

    """on conflict condition"""
    on_conflict: messages_on_conflict
  ): messages

  """
  insert data into the table: "single_dms"
  """
  insert_single_dms(
    """the rows to be inserted"""
    objects: [single_dms_insert_input!]!
  ): single_dms_mutation_response

  """
  insert a single row into the table: "single_dms"
  """
  insert_single_dms_one(
    """the row to be inserted"""
    object: single_dms_insert_input!
  ): single_dms

  """
  insert data into the table: "threads"
  """
  insert_threads(
    """the rows to be inserted"""
    objects: [threads_insert_input!]!

    """on conflict condition"""
    on_conflict: threads_on_conflict
  ): threads_mutation_response

  """
  insert a single row into the table: "threads"
  """
  insert_threads_one(
    """the row to be inserted"""
    object: threads_insert_input!

    """on conflict condition"""
    on_conflict: threads_on_conflict
  ): threads

  """
  insert data into the table: "user_to_group"
  """
  insert_user_to_group(
    """the rows to be inserted"""
    objects: [user_to_group_insert_input!]!

    """on conflict condition"""
    on_conflict: user_to_group_on_conflict
  ): user_to_group_mutation_response

  """
  insert a single row into the table: "user_to_group"
  """
  insert_user_to_group_one(
    """the row to be inserted"""
    object: user_to_group_insert_input!

    """on conflict condition"""
    on_conflict: user_to_group_on_conflict
  ): user_to_group

  """
  insert data into the table: "user_to_thread"
  """
  insert_user_to_thread(
    """the rows to be inserted"""
    objects: [user_to_thread_insert_input!]!

    """on conflict condition"""
    on_conflict: user_to_thread_on_conflict
  ): user_to_thread_mutation_response

  """
  insert a single row into the table: "user_to_thread"
  """
  insert_user_to_thread_one(
    """the row to be inserted"""
    object: user_to_thread_insert_input!

    """on conflict condition"""
    on_conflict: user_to_thread_on_conflict
  ): user_to_thread

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users
  refresh_access_token(refreshToken: String!, userId: uuid!): AccessToken

  """
  update data of the table: "group_join_tokens"
  """
  update_group_join_tokens(
    """sets the columns of the filtered rows to the given values"""
    _set: group_join_tokens_set_input

    """filter the rows which have to be updated"""
    where: group_join_tokens_bool_exp!
  ): group_join_tokens_mutation_response

  """
  update single row of the table: "group_join_tokens"
  """
  update_group_join_tokens_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: group_join_tokens_set_input
    pk_columns: group_join_tokens_pk_columns_input!
  ): group_join_tokens

  """
  update data of the table: "groups"
  """
  update_groups(
    """sets the columns of the filtered rows to the given values"""
    _set: groups_set_input

    """filter the rows which have to be updated"""
    where: groups_bool_exp!
  ): groups_mutation_response

  """
  update single row of the table: "groups"
  """
  update_groups_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: groups_set_input
    pk_columns: groups_pk_columns_input!
  ): groups

  """
  update data of the table: "message_reaction_types"
  """
  update_message_reaction_types(
    """sets the columns of the filtered rows to the given values"""
    _set: message_reaction_types_set_input

    """filter the rows which have to be updated"""
    where: message_reaction_types_bool_exp!
  ): message_reaction_types_mutation_response

  """
  update single row of the table: "message_reaction_types"
  """
  update_message_reaction_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: message_reaction_types_set_input
    pk_columns: message_reaction_types_pk_columns_input!
  ): message_reaction_types

  """
  update data of the table: "message_reactions"
  """
  update_message_reactions(
    """sets the columns of the filtered rows to the given values"""
    _set: message_reactions_set_input

    """filter the rows which have to be updated"""
    where: message_reactions_bool_exp!
  ): message_reactions_mutation_response

  """
  update single row of the table: "message_reactions"
  """
  update_message_reactions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: message_reactions_set_input
    pk_columns: message_reactions_pk_columns_input!
  ): message_reactions

  """
  update data of the table: "messages"
  """
  update_messages(
    """sets the columns of the filtered rows to the given values"""
    _set: messages_set_input

    """filter the rows which have to be updated"""
    where: messages_bool_exp!
  ): messages_mutation_response

  """
  update single row of the table: "messages"
  """
  update_messages_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: messages_set_input
    pk_columns: messages_pk_columns_input!
  ): messages

  """
  update data of the table: "single_dms"
  """
  update_single_dms(
    """sets the columns of the filtered rows to the given values"""
    _set: single_dms_set_input

    """filter the rows which have to be updated"""
    where: single_dms_bool_exp!
  ): single_dms_mutation_response

  """
  update data of the table: "threads"
  """
  update_threads(
    """sets the columns of the filtered rows to the given values"""
    _set: threads_set_input

    """filter the rows which have to be updated"""
    where: threads_bool_exp!
  ): threads_mutation_response

  """
  update single row of the table: "threads"
  """
  update_threads_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: threads_set_input
    pk_columns: threads_pk_columns_input!
  ): threads

  """
  update data of the table: "user_to_group"
  """
  update_user_to_group(
    """sets the columns of the filtered rows to the given values"""
    _set: user_to_group_set_input

    """filter the rows which have to be updated"""
    where: user_to_group_bool_exp!
  ): user_to_group_mutation_response

  """
  update single row of the table: "user_to_group"
  """
  update_user_to_group_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_to_group_set_input
    pk_columns: user_to_group_pk_columns_input!
  ): user_to_group

  """
  update data of the table: "user_to_thread"
  """
  update_user_to_thread(
    """sets the columns of the filtered rows to the given values"""
    _set: user_to_thread_set_input

    """filter the rows which have to be updated"""
    where: user_to_thread_bool_exp!
  ): user_to_thread_mutation_response

  """
  update single row of the table: "user_to_thread"
  """
  update_user_to_thread_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_to_thread_set_input
    pk_columns: user_to_thread_pk_columns_input!
  ): user_to_thread

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """An array relationship"""
  group_join_tokens(
    """distinct select on columns"""
    distinct_on: [group_join_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_join_tokens_order_by!]

    """filter the rows returned"""
    where: group_join_tokens_bool_exp
  ): [group_join_tokens!]!

  """An aggregate relationship"""
  group_join_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [group_join_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_join_tokens_order_by!]

    """filter the rows returned"""
    where: group_join_tokens_bool_exp
  ): group_join_tokens_aggregate!

  """
  fetch data from the table: "group_join_tokens" using primary key columns
  """
  group_join_tokens_by_pk(id: uuid!): group_join_tokens

  """
  fetch data from the table: "groups"
  """
  groups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  fetch aggregated fields from the table: "groups"
  """
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """fetch data from the table: "groups" using primary key columns"""
  groups_by_pk(id: uuid!): groups

  """
  fetch data from the table: "message_reaction_types"
  """
  message_reaction_types(
    """distinct select on columns"""
    distinct_on: [message_reaction_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reaction_types_order_by!]

    """filter the rows returned"""
    where: message_reaction_types_bool_exp
  ): [message_reaction_types!]!

  """
  fetch aggregated fields from the table: "message_reaction_types"
  """
  message_reaction_types_aggregate(
    """distinct select on columns"""
    distinct_on: [message_reaction_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reaction_types_order_by!]

    """filter the rows returned"""
    where: message_reaction_types_bool_exp
  ): message_reaction_types_aggregate!

  """
  fetch data from the table: "message_reaction_types" using primary key columns
  """
  message_reaction_types_by_pk(reaction_type: String!): message_reaction_types

  """An array relationship"""
  message_reactions(
    """distinct select on columns"""
    distinct_on: [message_reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reactions_order_by!]

    """filter the rows returned"""
    where: message_reactions_bool_exp
  ): [message_reactions!]!

  """An aggregate relationship"""
  message_reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [message_reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reactions_order_by!]

    """filter the rows returned"""
    where: message_reactions_bool_exp
  ): message_reactions_aggregate!

  """
  fetch data from the table: "message_reactions" using primary key columns
  """
  message_reactions_by_pk(message_id: uuid!, reaction_type: message_reaction_types_enum!, user_id: uuid!): message_reactions

  """An array relationship"""
  messages(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!

  """An aggregate relationship"""
  messages_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!

  """fetch data from the table: "messages" using primary key columns"""
  messages_by_pk(id: uuid!): messages

  """
  fetch data from the table: "single_dms"
  """
  single_dms(
    """distinct select on columns"""
    distinct_on: [single_dms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [single_dms_order_by!]

    """filter the rows returned"""
    where: single_dms_bool_exp
  ): [single_dms!]!

  """
  fetch aggregated fields from the table: "single_dms"
  """
  single_dms_aggregate(
    """distinct select on columns"""
    distinct_on: [single_dms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [single_dms_order_by!]

    """filter the rows returned"""
    where: single_dms_bool_exp
  ): single_dms_aggregate!

  """
  fetch data from the table: "threads"
  """
  threads(
    """distinct select on columns"""
    distinct_on: [threads_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [threads_order_by!]

    """filter the rows returned"""
    where: threads_bool_exp
  ): [threads!]!

  """
  fetch aggregated fields from the table: "threads"
  """
  threads_aggregate(
    """distinct select on columns"""
    distinct_on: [threads_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [threads_order_by!]

    """filter the rows returned"""
    where: threads_bool_exp
  ): threads_aggregate!

  """fetch data from the table: "threads" using primary key columns"""
  threads_by_pk(id: uuid!): threads

  """
  fetch data from the table: "user_to_group"
  """
  user_to_group(
    """distinct select on columns"""
    distinct_on: [user_to_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_group_order_by!]

    """filter the rows returned"""
    where: user_to_group_bool_exp
  ): [user_to_group!]!

  """
  fetch aggregated fields from the table: "user_to_group"
  """
  user_to_group_aggregate(
    """distinct select on columns"""
    distinct_on: [user_to_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_group_order_by!]

    """filter the rows returned"""
    where: user_to_group_bool_exp
  ): user_to_group_aggregate!

  """fetch data from the table: "user_to_group" using primary key columns"""
  user_to_group_by_pk(id: uuid!): user_to_group

  """
  fetch data from the table: "user_to_thread"
  """
  user_to_thread(
    """distinct select on columns"""
    distinct_on: [user_to_thread_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_thread_order_by!]

    """filter the rows returned"""
    where: user_to_thread_bool_exp
  ): [user_to_thread!]!

  """
  fetch aggregated fields from the table: "user_to_thread"
  """
  user_to_thread_aggregate(
    """distinct select on columns"""
    distinct_on: [user_to_thread_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_thread_order_by!]

    """filter the rows returned"""
    where: user_to_thread_bool_exp
  ): user_to_thread_aggregate!

  """fetch data from the table: "user_to_thread" using primary key columns"""
  user_to_thread_by_pk(id: uuid!): user_to_thread

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users
}

"""
columns and relationships of "single_dms"
"""
type single_dms {
  id: uuid
  name: String

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [user_to_thread_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_thread_order_by!]

    """filter the rows returned"""
    where: user_to_thread_bool_exp
  ): [user_to_thread!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [user_to_thread_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_thread_order_by!]

    """filter the rows returned"""
    where: user_to_thread_bool_exp
  ): user_to_thread_aggregate!
}

"""
aggregated selection of "single_dms"
"""
type single_dms_aggregate {
  aggregate: single_dms_aggregate_fields
  nodes: [single_dms!]!
}

"""
aggregate fields of "single_dms"
"""
type single_dms_aggregate_fields {
  count(columns: [single_dms_select_column!], distinct: Boolean): Int!
  max: single_dms_max_fields
  min: single_dms_min_fields
}

"""
Boolean expression to filter rows from the table "single_dms". All fields are combined with a logical 'AND'.
"""
input single_dms_bool_exp {
  _and: [single_dms_bool_exp!]
  _not: single_dms_bool_exp
  _or: [single_dms_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
  users: user_to_thread_bool_exp
}

"""
input type for inserting data into table "single_dms"
"""
input single_dms_insert_input {
  id: uuid
  name: String
  users: user_to_thread_arr_rel_insert_input
}

"""aggregate max on columns"""
type single_dms_max_fields {
  id: uuid
  name: String
}

"""aggregate min on columns"""
type single_dms_min_fields {
  id: uuid
  name: String
}

"""
response of any mutation on the table "single_dms"
"""
type single_dms_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [single_dms!]!
}

"""Ordering options when selecting data from "single_dms"."""
input single_dms_order_by {
  id: order_by
  name: order_by
  users_aggregate: user_to_thread_aggregate_order_by
}

"""
select columns of table "single_dms"
"""
enum single_dms_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "single_dms"
"""
input single_dms_set_input {
  id: uuid
  name: String
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """An array relationship"""
  group_join_tokens(
    """distinct select on columns"""
    distinct_on: [group_join_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_join_tokens_order_by!]

    """filter the rows returned"""
    where: group_join_tokens_bool_exp
  ): [group_join_tokens!]!

  """An aggregate relationship"""
  group_join_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [group_join_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_join_tokens_order_by!]

    """filter the rows returned"""
    where: group_join_tokens_bool_exp
  ): group_join_tokens_aggregate!

  """
  fetch data from the table: "group_join_tokens" using primary key columns
  """
  group_join_tokens_by_pk(id: uuid!): group_join_tokens

  """
  fetch data from the table: "groups"
  """
  groups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  fetch aggregated fields from the table: "groups"
  """
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """fetch data from the table: "groups" using primary key columns"""
  groups_by_pk(id: uuid!): groups

  """
  fetch data from the table: "message_reaction_types"
  """
  message_reaction_types(
    """distinct select on columns"""
    distinct_on: [message_reaction_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reaction_types_order_by!]

    """filter the rows returned"""
    where: message_reaction_types_bool_exp
  ): [message_reaction_types!]!

  """
  fetch aggregated fields from the table: "message_reaction_types"
  """
  message_reaction_types_aggregate(
    """distinct select on columns"""
    distinct_on: [message_reaction_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reaction_types_order_by!]

    """filter the rows returned"""
    where: message_reaction_types_bool_exp
  ): message_reaction_types_aggregate!

  """
  fetch data from the table: "message_reaction_types" using primary key columns
  """
  message_reaction_types_by_pk(reaction_type: String!): message_reaction_types

  """An array relationship"""
  message_reactions(
    """distinct select on columns"""
    distinct_on: [message_reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reactions_order_by!]

    """filter the rows returned"""
    where: message_reactions_bool_exp
  ): [message_reactions!]!

  """An aggregate relationship"""
  message_reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [message_reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reactions_order_by!]

    """filter the rows returned"""
    where: message_reactions_bool_exp
  ): message_reactions_aggregate!

  """
  fetch data from the table: "message_reactions" using primary key columns
  """
  message_reactions_by_pk(message_id: uuid!, reaction_type: message_reaction_types_enum!, user_id: uuid!): message_reactions

  """An array relationship"""
  messages(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!

  """An aggregate relationship"""
  messages_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!

  """fetch data from the table: "messages" using primary key columns"""
  messages_by_pk(id: uuid!): messages

  """
  fetch data from the table: "single_dms"
  """
  single_dms(
    """distinct select on columns"""
    distinct_on: [single_dms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [single_dms_order_by!]

    """filter the rows returned"""
    where: single_dms_bool_exp
  ): [single_dms!]!

  """
  fetch aggregated fields from the table: "single_dms"
  """
  single_dms_aggregate(
    """distinct select on columns"""
    distinct_on: [single_dms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [single_dms_order_by!]

    """filter the rows returned"""
    where: single_dms_bool_exp
  ): single_dms_aggregate!

  """
  fetch data from the table: "threads"
  """
  threads(
    """distinct select on columns"""
    distinct_on: [threads_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [threads_order_by!]

    """filter the rows returned"""
    where: threads_bool_exp
  ): [threads!]!

  """
  fetch aggregated fields from the table: "threads"
  """
  threads_aggregate(
    """distinct select on columns"""
    distinct_on: [threads_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [threads_order_by!]

    """filter the rows returned"""
    where: threads_bool_exp
  ): threads_aggregate!

  """fetch data from the table: "threads" using primary key columns"""
  threads_by_pk(id: uuid!): threads

  """
  fetch data from the table: "user_to_group"
  """
  user_to_group(
    """distinct select on columns"""
    distinct_on: [user_to_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_group_order_by!]

    """filter the rows returned"""
    where: user_to_group_bool_exp
  ): [user_to_group!]!

  """
  fetch aggregated fields from the table: "user_to_group"
  """
  user_to_group_aggregate(
    """distinct select on columns"""
    distinct_on: [user_to_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_group_order_by!]

    """filter the rows returned"""
    where: user_to_group_bool_exp
  ): user_to_group_aggregate!

  """fetch data from the table: "user_to_group" using primary key columns"""
  user_to_group_by_pk(id: uuid!): user_to_group

  """
  fetch data from the table: "user_to_thread"
  """
  user_to_thread(
    """distinct select on columns"""
    distinct_on: [user_to_thread_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_thread_order_by!]

    """filter the rows returned"""
    where: user_to_thread_bool_exp
  ): [user_to_thread!]!

  """
  fetch aggregated fields from the table: "user_to_thread"
  """
  user_to_thread_aggregate(
    """distinct select on columns"""
    distinct_on: [user_to_thread_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_thread_order_by!]

    """filter the rows returned"""
    where: user_to_thread_bool_exp
  ): user_to_thread_aggregate!

  """fetch data from the table: "user_to_thread" using primary key columns"""
  user_to_thread_by_pk(id: uuid!): user_to_thread

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users
}

type ThreadResponse {
  id: uuid!
  name: String
}

"""
columns and relationships of "threads"
"""
type threads {
  """An object relationship"""
  group: groups

  """null if is dm"""
  group_id: uuid
  id: uuid!
  is_dm: Boolean!

  """An array relationship"""
  messages(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!

  """An aggregate relationship"""
  messages_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!
  name: String

  """An array relationship"""
  user_to_threads(
    """distinct select on columns"""
    distinct_on: [user_to_thread_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_thread_order_by!]

    """filter the rows returned"""
    where: user_to_thread_bool_exp
  ): [user_to_thread!]!

  """An aggregate relationship"""
  user_to_threads_aggregate(
    """distinct select on columns"""
    distinct_on: [user_to_thread_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_thread_order_by!]

    """filter the rows returned"""
    where: user_to_thread_bool_exp
  ): user_to_thread_aggregate!
}

"""
aggregated selection of "threads"
"""
type threads_aggregate {
  aggregate: threads_aggregate_fields
  nodes: [threads!]!
}

"""
aggregate fields of "threads"
"""
type threads_aggregate_fields {
  count(columns: [threads_select_column!], distinct: Boolean): Int!
  max: threads_max_fields
  min: threads_min_fields
}

"""
order by aggregate values of table "threads"
"""
input threads_aggregate_order_by {
  count: order_by
  max: threads_max_order_by
  min: threads_min_order_by
}

"""
input type for inserting array relation for remote table "threads"
"""
input threads_arr_rel_insert_input {
  data: [threads_insert_input!]!

  """on conflict condition"""
  on_conflict: threads_on_conflict
}

"""
Boolean expression to filter rows from the table "threads". All fields are combined with a logical 'AND'.
"""
input threads_bool_exp {
  _and: [threads_bool_exp!]
  _not: threads_bool_exp
  _or: [threads_bool_exp!]
  group: groups_bool_exp
  group_id: uuid_comparison_exp
  id: uuid_comparison_exp
  is_dm: Boolean_comparison_exp
  messages: messages_bool_exp
  name: String_comparison_exp
  user_to_threads: user_to_thread_bool_exp
}

"""
unique or primary key constraints on table "threads"
"""
enum threads_constraint {
  """unique or primary key constraint"""
  group_threads_pkey
}

"""
input type for inserting data into table "threads"
"""
input threads_insert_input {
  group: groups_obj_rel_insert_input

  """null if is dm"""
  group_id: uuid
  id: uuid
  is_dm: Boolean
  messages: messages_arr_rel_insert_input
  name: String
  user_to_threads: user_to_thread_arr_rel_insert_input
}

"""aggregate max on columns"""
type threads_max_fields {
  """null if is dm"""
  group_id: uuid
  id: uuid
  name: String
}

"""
order by max() on columns of table "threads"
"""
input threads_max_order_by {
  """null if is dm"""
  group_id: order_by
  id: order_by
  name: order_by
}

"""aggregate min on columns"""
type threads_min_fields {
  """null if is dm"""
  group_id: uuid
  id: uuid
  name: String
}

"""
order by min() on columns of table "threads"
"""
input threads_min_order_by {
  """null if is dm"""
  group_id: order_by
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "threads"
"""
type threads_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [threads!]!
}

"""
input type for inserting object relation for remote table "threads"
"""
input threads_obj_rel_insert_input {
  data: threads_insert_input!

  """on conflict condition"""
  on_conflict: threads_on_conflict
}

"""
on conflict condition type for table "threads"
"""
input threads_on_conflict {
  constraint: threads_constraint!
  update_columns: [threads_update_column!]! = []
  where: threads_bool_exp
}

"""Ordering options when selecting data from "threads"."""
input threads_order_by {
  group: groups_order_by
  group_id: order_by
  id: order_by
  is_dm: order_by
  messages_aggregate: messages_aggregate_order_by
  name: order_by
  user_to_threads_aggregate: user_to_thread_aggregate_order_by
}

"""primary key columns input for table: threads"""
input threads_pk_columns_input {
  id: uuid!
}

"""
select columns of table "threads"
"""
enum threads_select_column {
  """column name"""
  group_id

  """column name"""
  id

  """column name"""
  is_dm

  """column name"""
  name
}

"""
input type for updating data in table "threads"
"""
input threads_set_input {
  """null if is dm"""
  group_id: uuid
  id: uuid
  is_dm: Boolean
  name: String
}

"""
update columns of table "threads"
"""
enum threads_update_column {
  """column name"""
  group_id

  """column name"""
  id

  """column name"""
  is_dm

  """column name"""
  name
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "user_to_group"
"""
type user_to_group {
  admin: Boolean!

  """An object relationship"""
  group: groups!
  group_id: uuid!
  id: uuid!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "user_to_group"
"""
type user_to_group_aggregate {
  aggregate: user_to_group_aggregate_fields
  nodes: [user_to_group!]!
}

"""
aggregate fields of "user_to_group"
"""
type user_to_group_aggregate_fields {
  count(columns: [user_to_group_select_column!], distinct: Boolean): Int!
  max: user_to_group_max_fields
  min: user_to_group_min_fields
}

"""
order by aggregate values of table "user_to_group"
"""
input user_to_group_aggregate_order_by {
  count: order_by
  max: user_to_group_max_order_by
  min: user_to_group_min_order_by
}

"""
input type for inserting array relation for remote table "user_to_group"
"""
input user_to_group_arr_rel_insert_input {
  data: [user_to_group_insert_input!]!

  """on conflict condition"""
  on_conflict: user_to_group_on_conflict
}

"""
Boolean expression to filter rows from the table "user_to_group". All fields are combined with a logical 'AND'.
"""
input user_to_group_bool_exp {
  _and: [user_to_group_bool_exp!]
  _not: user_to_group_bool_exp
  _or: [user_to_group_bool_exp!]
  admin: Boolean_comparison_exp
  group: groups_bool_exp
  group_id: uuid_comparison_exp
  id: uuid_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_to_group"
"""
enum user_to_group_constraint {
  """unique or primary key constraint"""
  user_to_group_pkey
}

"""
input type for inserting data into table "user_to_group"
"""
input user_to_group_insert_input {
  admin: Boolean
  group: groups_obj_rel_insert_input
  group_id: uuid
  id: uuid
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type user_to_group_max_fields {
  group_id: uuid
  id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "user_to_group"
"""
input user_to_group_max_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type user_to_group_min_fields {
  group_id: uuid
  id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "user_to_group"
"""
input user_to_group_min_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_to_group"
"""
type user_to_group_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_to_group!]!
}

"""
on conflict condition type for table "user_to_group"
"""
input user_to_group_on_conflict {
  constraint: user_to_group_constraint!
  update_columns: [user_to_group_update_column!]! = []
  where: user_to_group_bool_exp
}

"""Ordering options when selecting data from "user_to_group"."""
input user_to_group_order_by {
  admin: order_by
  group: groups_order_by
  group_id: order_by
  id: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: user_to_group"""
input user_to_group_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user_to_group"
"""
enum user_to_group_select_column {
  """column name"""
  admin

  """column name"""
  group_id

  """column name"""
  id

  """column name"""
  user_id
}

"""
input type for updating data in table "user_to_group"
"""
input user_to_group_set_input {
  admin: Boolean
  group_id: uuid
  id: uuid
  user_id: uuid
}

"""
update columns of table "user_to_group"
"""
enum user_to_group_update_column {
  """column name"""
  admin

  """column name"""
  group_id

  """column name"""
  id

  """column name"""
  user_id
}

"""
columns and relationships of "user_to_thread"
"""
type user_to_thread {
  id: uuid!

  """An object relationship"""
  thread: threads!
  thread_id: uuid!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "user_to_thread"
"""
type user_to_thread_aggregate {
  aggregate: user_to_thread_aggregate_fields
  nodes: [user_to_thread!]!
}

"""
aggregate fields of "user_to_thread"
"""
type user_to_thread_aggregate_fields {
  count(columns: [user_to_thread_select_column!], distinct: Boolean): Int!
  max: user_to_thread_max_fields
  min: user_to_thread_min_fields
}

"""
order by aggregate values of table "user_to_thread"
"""
input user_to_thread_aggregate_order_by {
  count: order_by
  max: user_to_thread_max_order_by
  min: user_to_thread_min_order_by
}

"""
input type for inserting array relation for remote table "user_to_thread"
"""
input user_to_thread_arr_rel_insert_input {
  data: [user_to_thread_insert_input!]!

  """on conflict condition"""
  on_conflict: user_to_thread_on_conflict
}

"""
Boolean expression to filter rows from the table "user_to_thread". All fields are combined with a logical 'AND'.
"""
input user_to_thread_bool_exp {
  _and: [user_to_thread_bool_exp!]
  _not: user_to_thread_bool_exp
  _or: [user_to_thread_bool_exp!]
  id: uuid_comparison_exp
  thread: threads_bool_exp
  thread_id: uuid_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_to_thread"
"""
enum user_to_thread_constraint {
  """unique or primary key constraint"""
  user_to_thread_pkey
}

"""
input type for inserting data into table "user_to_thread"
"""
input user_to_thread_insert_input {
  id: uuid
  thread: threads_obj_rel_insert_input
  thread_id: uuid
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type user_to_thread_max_fields {
  id: uuid
  thread_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "user_to_thread"
"""
input user_to_thread_max_order_by {
  id: order_by
  thread_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type user_to_thread_min_fields {
  id: uuid
  thread_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "user_to_thread"
"""
input user_to_thread_min_order_by {
  id: order_by
  thread_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_to_thread"
"""
type user_to_thread_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_to_thread!]!
}

"""
on conflict condition type for table "user_to_thread"
"""
input user_to_thread_on_conflict {
  constraint: user_to_thread_constraint!
  update_columns: [user_to_thread_update_column!]! = []
  where: user_to_thread_bool_exp
}

"""Ordering options when selecting data from "user_to_thread"."""
input user_to_thread_order_by {
  id: order_by
  thread: threads_order_by
  thread_id: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: user_to_thread"""
input user_to_thread_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user_to_thread"
"""
enum user_to_thread_select_column {
  """column name"""
  id

  """column name"""
  thread_id

  """column name"""
  user_id
}

"""
input type for updating data in table "user_to_thread"
"""
input user_to_thread_set_input {
  id: uuid
  thread_id: uuid
  user_id: uuid
}

"""
update columns of table "user_to_thread"
"""
enum user_to_thread_update_column {
  """column name"""
  id

  """column name"""
  thread_id

  """column name"""
  user_id
}

"""
columns and relationships of "users"
"""
type users {
  email: String
  id: uuid!

  """An array relationship"""
  message_reactions(
    """distinct select on columns"""
    distinct_on: [message_reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reactions_order_by!]

    """filter the rows returned"""
    where: message_reactions_bool_exp
  ): [message_reactions!]!

  """An aggregate relationship"""
  message_reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [message_reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_reactions_order_by!]

    """filter the rows returned"""
    where: message_reactions_bool_exp
  ): message_reactions_aggregate!

  """An array relationship"""
  messages(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!

  """An aggregate relationship"""
  messages_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!
  name: String!
  profile_picture: String
  sub: String!

  """An array relationship"""
  user_to_groups(
    """distinct select on columns"""
    distinct_on: [user_to_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_group_order_by!]

    """filter the rows returned"""
    where: user_to_group_bool_exp
  ): [user_to_group!]!

  """An aggregate relationship"""
  user_to_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [user_to_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_group_order_by!]

    """filter the rows returned"""
    where: user_to_group_bool_exp
  ): user_to_group_aggregate!

  """An array relationship"""
  user_to_threads(
    """distinct select on columns"""
    distinct_on: [user_to_thread_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_thread_order_by!]

    """filter the rows returned"""
    where: user_to_thread_bool_exp
  ): [user_to_thread!]!

  """An aggregate relationship"""
  user_to_threads_aggregate(
    """distinct select on columns"""
    distinct_on: [user_to_thread_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_to_thread_order_by!]

    """filter the rows returned"""
    where: user_to_thread_bool_exp
  ): user_to_thread_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  email: String_comparison_exp
  id: uuid_comparison_exp
  message_reactions: message_reactions_bool_exp
  messages: messages_bool_exp
  name: String_comparison_exp
  profile_picture: String_comparison_exp
  sub: String_comparison_exp
  user_to_groups: user_to_group_bool_exp
  user_to_threads: user_to_thread_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey

  """unique or primary key constraint"""
  users_sub_key
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  email: String
  id: uuid
  message_reactions: message_reactions_arr_rel_insert_input
  messages: messages_arr_rel_insert_input
  name: String
  profile_picture: String
  sub: String
  user_to_groups: user_to_group_arr_rel_insert_input
  user_to_threads: user_to_thread_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  email: String
  id: uuid
  name: String
  profile_picture: String
  sub: String
}

"""aggregate min on columns"""
type users_min_fields {
  email: String
  id: uuid
  name: String
  profile_picture: String
  sub: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  email: order_by
  id: order_by
  message_reactions_aggregate: message_reactions_aggregate_order_by
  messages_aggregate: messages_aggregate_order_by
  name: order_by
  profile_picture: order_by
  sub: order_by
  user_to_groups_aggregate: user_to_group_aggregate_order_by
  user_to_threads_aggregate: user_to_thread_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  profile_picture

  """column name"""
  sub
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  email: String
  id: uuid
  name: String
  profile_picture: String
  sub: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  profile_picture

  """column name"""
  sub
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

